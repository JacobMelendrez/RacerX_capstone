let express,engine,bcrypt,sqlite3,open,cookieParser,grantAuthToken,lookUpUserFromAuthToken,res;_328‍.x([["dbPromise",()=>dbPromise]]);_328‍.w("express",[["default",["express"],function(v){express=v}]]);_328‍.w("express-handlebars",[["engine",["engine"],function(v){engine=v}]]);_328‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_328‍.w("sqlite3",[["default",["sqlite3"],function(v){sqlite3=v}]]);_328‍.w("sqlite",[["open",["open"],function(v){open=v}]]);_328‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);_328‍.w("./authorize",[["grantAuthToken",["grantAuthToken"],function(v){grantAuthToken=v}],["lookUpUserFromAuthToken",["lookUpUserFromAuthToken"],function(v){lookUpUserFromAuthToken=v}]]);_328‍.w("express/lib/response",[["default",["res"],function(v){res=v}]]);









       const dbPromise = _328‍.a("open",open)({
    filename: "data.db",
    driver: _328‍.a("sqlite3",sqlite3).Database,
});_328‍.j(["dbPromise"]);

const app = _328‍.a("express",express)();

app.engine("handlebars", _328‍.a("engine",engine)());
app.set('view engine', 'handlebars');

app.use(_328‍.a("cookieParser",cookieParser)());
app.use(_328‍.a("express",express).urlencoded({ extended: false}));
app.use('/static', _328‍.a("express",express).static(__dirname + '/static'));

app.use(async (req, res, next) =>{
    const {authToken} = req.cookies;
    if(!authToken){
        //console.log('request from user not logged in');
        return next();
    }
    try {
        const user = await _328‍.a("lookUpUserFromAuthToken",lookUpUserFromAuthToken)(authToken);
        //console.log('request from user', user.username);
        req.user = user;
    } catch (e) {
        next(e);
    }
    next();
})

app.get("/", async (req, res) => {
    //read messages from database
    //console.log('request user', req.user);
    const db = await dbPromise;
    const eventList = await db.all(
        `SELECT * FROM Events;`
    );
    /*await db.run("SELECT * FROM Events", async(err, res)=>{
        if (err) throw err;
        else{
            console.log('success')
            res.send(res)
        }
    });
    console.log('Query ran successfully');*/
    /*const messages = await db.all(`SELECT 
        Messages.id,
        Messages.content,
        Users.username as authorName
    FROM Messages LEFT JOIN Users WHERE Messages.authorId = Users.id`);
    console.log('messages', messages)*/
    _328‍.g.console.log(eventList);
    res.render("home", { eventList, user: req.user });
});

app.get('/register', (req, res) =>{
    if(req.user){
        return res.redirect('/')
    }
    res.render('register')
})

app.get('/login', (req, res) =>{
    if(req.user){
        return res.redirect('/')
    }
    res.render('login')
})

//logs out the user when they are logged in
app.get('/logout', (req, res) =>{
    res.clearCookie('authToken');
    res.redirect('/');
})

app.get('/create_conference', (req, res)=>{
    res.render("create_conference", { user: req.user });
})

// Retrieves events and posts them on home page - Rishab
app.get("/event", async (req, res) =>{
    _328‍.g.console.log("Testing 2 ", eventID);
    const db = await dbPromise;
    const events = await db.get(
        `SELECT 
            title,
            eventDescription,
            zoomLink,
            startDate,
            startTime,
            endDate,
            endTime
        FROM Events WHERE id = ?;`, eventID.id
    );
    _328‍.g.console.log("Testing 3 ", events);
    res.render("event", {events});
});

var eventID;

app.post('/', async(req, res)=>{
    const db = await dbPromise;
    _328‍.g.console.log(req.body.test)
    try {
        eventID = await db.get(
            `SELECT id
            FROM Events WHERE id = ?`, req.body.test
        );
        _328‍.g.console.log("Testing ", eventID);
        res.redirect("/event")
    } catch (e){
        _328‍.g.console.log({error: e});
    }
})

app.post('/register', async (req, res)=>{
    const db = await dbPromise;
    const {
        username,
        email,
        password
    } = req.body;
    const passwordHash = await _328‍.a("bcrypt",bcrypt).hash(password, 10);
    try {
        await db.run('INSERT INTO Users (username, email, password) VALUES (?,?,?);',
            username,
            email,
            passwordHash
        )
        const user = await db.get('SELECT id FROM Users WHERE email=?;', email);
        const token = await _328‍.a("grantAuthToken",grantAuthToken)(user.id);
        res.cookie('authToken', token);
        res.redirect('/');
    } catch (e) {
        return res.render('register', { error: e})
    }
})

app.post('/login', async (req, res) =>{
    const db = await dbPromise;
    const {
        email,
        password
    } = req.body;
    try {
        const existingUser = await db.get("SELECT * FROM Users WHERE email=?", email);
        if(!existingUser){
            throw 'Incorrect login';
        }
        const passwordMatch = await _328‍.a("bcrypt",bcrypt).compare(password, existingUser.password);
        if(!passwordMatch){
            throw 'Incorrect login'
        }
        const token = await _328‍.a("grantAuthToken",grantAuthToken)(existingUser.id);
        res.cookie('authToken', token);
        res.redirect('/');
    } catch (e){
        return res.render('login', {error: e});
    }
})

/*app.post('/create_conference', async (req, res) =>{
    //write messages to database
    //messages.push(req.body.message);
    if(!req.user){
        res.status(401);
        return res.send("must be logged in to post messages");
    }
    const db = await dbPromise;
    await db.run('INSERT INTO Messages (content, authorId) VALUES (?, ?);', req.body.message, req.user.id);
    res.redirect('/');
});*/

// Added code for post conference details to DB - Rishab 
app.post('/create_conference', async(req, res) =>{
    //Write event details to db
    const db = await dbPromise;
    const {
        event_title,
        event_description,
        zoom_link,
        start_date,
        start_time,
        end_date,
        end_time
    } = req.body;

    _328‍.g.console.log(req.body);
    try{
        await db.run('INSERT or REPLACE INTO Events ( title, eventDescription, zoomLink, startDate, startTime, endDate, endTime) VALUES ( ?, ?, ?, ?, ?, ?, ?);', 
        event_title, event_description, zoom_link, start_date, start_time, end_date, end_time);
        console.log('Data inserted successfully');
    }
    catch (e){
        _328‍.g.console.log('Data was not inserted successfully', e);
        return res.render('create_conference', {error: e})

    }
    res.redirect('/')
});

const setup = async () => {
    const db = await dbPromise;
    await db.migrate();

    app.listen(8080, () =>{
        console.log("listening on http://localhost:8080"); //this line does not matter. just informative.
    });
}

setup();
